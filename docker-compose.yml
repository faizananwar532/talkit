version: "3.3"

services:
  # #api gateway
  # ambassador:
  #   image: datawire/ambassador:1.10.0
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - ./backend/ambassador:/ambassador/ambassador-config
  #   environment:
  #     - AMBASSADOR_NO_KUBEWATCH=no_kubewatch

  db:
    image: postgres
    container_name: postgresdb
    restart: always
    ports: 
    - $POSTGRES_PORT:$POSTGRES_PORT
    environment:
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_USER: $DB_USERNAME
      POSTGRES_DB: $AUTH_DB
    volumes: 
    - ./backend/pgdata:/var/lib/postgresql/data

  #database management tool 
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - $MACHINE_ADMINER_PORT:$ADMINER_PORT
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  # #frontend app
  # web:
  #   build: web/
  #   restart: always
  #   ports:
  #     - "80:80"
  #   environment:
  #     REACT_APP_GW_URL: http://localhost:3000

  auth:
    build: ./backend/auth
    container_name: auth
    command: sh ./docker-entrypoint.sh
    restart: always
    ports: 
    - 4000:4000
    depends_on: 
    - db
    - redis
    environment: 
      PORT: 4000
      POSTGRES_USERNAME: $DB_USERNAME
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_HOST: $DB_HOST
      POSTGRES_DATABASE: $AUTH_DB
      USER_CREATED_CHANNEL: $USER_CREATED_CHANNEL
      ACCESS_TOKEN_SECRET_KEY: $ACCESS_TOKEN_SECRET_KEY
      REFRESH_TOKEN_SECRET_KEY: $REFRESH_TOKEN_SECRET_KEY
      USER_ACTIVATION_TOKEN_SECRET_KEY: $USER_ACTIVATION_TOKEN_SECRET_KEY

  redis:
    container_name: redischatapp
    image: "redislabs/redismod"
    ports:
      - $REDIS_PORT:$REDIS_PORT
    volumes:
      - ./backend/redisdata:/data
    entrypoint:
      redis-server
        --loadmodule /usr/lib/redis/modules/redisearch.so
        --appendonly yes
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # notification:
  #   build: ./backend/notification
  #   container_name: notification
  #   command: sh ./docker-entrypoint.sh
  #   restart: always
  #   ports: 
  #   - 5000:5000
  #   depends_on: 
  #   - db
  #   - redis
  #   environment: 
  #     PORT: 5000
  #     USER_CREATED_CHANNEL: $USER_CREATED_CHANNEL

  chat:
    build: backend/chat/
    container_name: chat
    ports:
      - $CHAT_PORT:$CHAT_PORT
    command: sh ./docker-entrypoint.sh
    restart: always
    environment:
      CHAT_PORT: $CHAT_PORT
      REDIS_PORT: $REDIS_PORT
      AUTH_PORT: 4000
      REDIS_SERVER: $REDIS_SERVER
      REDIS_PASSWORD: $REDIS_PASSWORD 
      
  notification:
    build: ./backend/notification
    container_name: notification
    command: sh ./docker-entrypoint.sh
    restart: always
    ports: 
    - 5000:5000
    depends_on: 
    - db
    - redis
    environment: 
      PORT: 5000
      USER_CREATED_CHANNEL: $USER_CREATED_CHANNEL
      MAILGUN_API_KEY: $MAILGUN_API_KEY
      MAILGUN_DOMAIN_NAME: $MAILGUN_DOMAIN_NAME

  # redis:
  #   container_name: redis
  #   hostname: redis
  #   image: redis

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=local:redischatapp:6379
    ports:
    - "8081:8081"
